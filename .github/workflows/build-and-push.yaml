name: Build, Push & Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  REPOSITORY_ROOT: ${{ github.workspace }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history including tags

      - name: tag is
        run: |
           export VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')
           echo "tag=${{ steps.meta.outputs.tags }}}"

      - name: Extract version
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            VERSION="${{ github.event.pull_request.head.sha }}"
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION="${GITHUB_REF#refs/tags/v}"
          else
            VERSION="latest"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.VERSION }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  package-helm:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Extract version
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            VERSION="${{ github.event.pull_request.head.sha }}"
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION="${GITHUB_REF#refs/tags/v}"
          else
            VERSION="latest"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: tag is
        run: |
           echo "tag=${{ steps.meta.outputs.tags }}}"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Helm and yq
        run: |
          curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          sudo apt-get update && sudo apt-get install -y yq

      - name: Update Helm values with new image tag
        run: |
          yq -i -y '.image.tag = "${{ env.VERSION }}"' helm-chart/values.yaml
          cat helm-chart/values.yaml  # Debugging

      - name: Create dist directory
        run: mkdir -p dist/helm

      - name: Package Helm Chart
        id: package
        run: |
          export VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')
          VERSION="${{ env.VERSION }}"
          CHART_PATH=$(helm package helm-chart/ --version "$VERSION" --app-version "$VERSION" -d dist/helm | awk '{print $NF}')
          ls -lrt dist/helm/
          echo "CHART_PATH=${CHART_PATH}" >> $GITHUB_ENV

      #- name: Log in to GitHub Container Registry (GHCR)
      #  uses: docker/login-action@v3
      #  with:
      #   registry: ghcr.io
      #   username: ${{ github.actor }}
      #   password: ${{ secrets.GITHUB_TOKEN }}

      #- name: Push Helm Chart
      #  run: |
      #    helm push "${{ env.CHART_PATH }}" oci://${{ env.REGISTRY }}/${{ github.repository }}

      - name: Push Helm Chart to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io -u ${{ github.actor }} --password-stdin
          helm push "${{ env.CHART_PATH }}"  oci://ghcr.io/${{ github.repository }}